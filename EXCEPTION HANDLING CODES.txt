



import java.io.*;
import java.sql.*;
import java.util.Scanner;

public class ExceptionHandler {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {

            printMenu();
            int choice = getValidatedInteger("Enter your choice: ", scanner);


            switch (choice) {
                case 1: handleIOException(scanner); break;
                case 2: handleFileNotFoundException(scanner); break;
                case 3: handleEOFException(scanner); break;
                case 4: handleSQLException(scanner); break;
                case 5: handleClassNotFoundException(scanner); break;
                case 6: handleArithmeticException(scanner); break;
                case 7: handleNullPointerException(); break;
                case 8: handleArrayIndexOutOfBoundsException(scanner); break;
                case 9: handleClassCastException(); break;
                case 10: handleIllegalArgumentException(scanner); break;
                case 11: handleNumberFormatException(scanner); break;
                case 0:
                    System.out.println("Thank you for using the Exception Handling Tester. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice! Please choose a valid option.");
            }
        }
    }

    private static void printMenu() {
        System.out.println("\nException Handling Tester");
        System.out.println("===========================");
        System.out.println("\n");
        System.out.println("Press 1 IOException (e.g., File Reading)");
        System.out.println("Press 2 FileNotFoundException (e.g., Missing File)");
        System.out.println("Press 3 EOFException (e.g., Unexpected End of File)");
        System.out.println("Press 4 SQLException (e.g., Database Connection)");
        System.out.println("Press 5 ClassNotFoundException (e.g., Missing Class)");
        System.out.println("Press 6 ArithmeticException (e.g., Divide by Zero)");
        System.out.println("Press 7 NullPointerException (e.g., Null Object Access)");
        System.out.println("Press 8 ArrayIndexOutOfBoundsException (e.g., Invalid Index)");
        System.out.println("Press 9 ClassCastException (e.g., Invalid Type Casting)");
        System.out.println("Press 10 IllegalArgumentException (e.g., Invalid Argument)");
        System.out.println("Press 11 NumberFormatException (e.g., Invalid Number Format)");
        System.out.println("Press 0 Exit");
        System.out.println("\n");
    }

    private static int getValidatedInteger(String message, Scanner scanner) {
        while (true) {
            try {
                System.out.print(message);
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Please enter a valid integer.");
            }
        }
    }

    private static void printTitle(String title) {
        System.out.println("\n" + title);
        System.out.println("===============");
        System.out.println("===============");
    }

    private static void handleIOException(Scanner scanner) {
        printTitle("IOException");
        try {
            System.out.print("Enter the file name to read: ");
            String filename = scanner.nextLine().trim();
            if (filename.isEmpty()) {
                throw new IOException("Filename cannot be empty.");
            }
            BufferedReader reader = new BufferedReader(new FileReader(filename));
            System.out.println("File content: " + reader.readLine());
            reader.close();
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void handleFileNotFoundException(Scanner scanner) {
        printTitle("FileNotFoundException");
        try {
            System.out.print("Enter the file name to open: ");
            String filename = scanner.nextLine().trim();
            if (filename.isEmpty()) {
                throw new FileNotFoundException("Filename cannot be empty.");
            }
            FileInputStream fis = new FileInputStream(filename);
            fis.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void handleEOFException(Scanner scanner) {
        printTitle("EOFException");
        try {
            System.out.print("Enter the file name to read: ");
            String filename = scanner.nextLine().trim();
            if (filename.isEmpty()) {
                throw new EOFException("Filename cannot be empty.");
            }
            DataInputStream dis = new DataInputStream(new FileInputStream(filename));
            while (true) {
                dis.readByte();
            }
        } catch (EOFException e) {
            System.out.println("End of file reached.");
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void handleSQLException(Scanner scanner) {
        printTitle("SQLException");
        try {
            System.out.print("Enter database URL: ");
            String dbUrl = scanner.nextLine().trim();
            System.out.print("Enter username: ");
            String username = scanner.nextLine().trim();
            System.out.print("Enter password: ");
            String password = scanner.nextLine().trim();
            try (Connection conn = DriverManager.getConnection(dbUrl, username, password)) {
                System.out.println("Connection successful!");
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void handleClassNotFoundException(Scanner scanner) {
        printTitle("ClassNotFoundException");
        try {
            System.out.print("Enter the class name to load: ");
            String className = scanner.nextLine().trim();
            if (className.isEmpty()) {
                throw new ClassNotFoundException("Class name cannot be empty.");
            }
            Class.forName(className);
            System.out.println("Class loaded successfully.");
        } catch (ClassNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void handleArithmeticException(Scanner scanner) {
        printTitle("ArithmeticException");
        try {
            int dividend = getValidatedInteger("Enter dividend: ", scanner);
            int divisor = getValidatedInteger("Enter divisor: ", scanner);
            System.out.println("Result: " + (dividend / divisor));
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero is not allowed.");
        }
    }

    private static void handleNullPointerException() {
        printTitle("NullPointerException");
        try {
            String str = null;
            System.out.println("Length: " + str.length());
        } catch (NullPointerException e) {
            System.out.println("Error: Attempted to access a null object.");
        }
    }

    private static void handleArrayIndexOutOfBoundsException(Scanner scanner) {
        printTitle("ArrayIndexOutOfBoundsException");
        try {
            int size = getValidatedInteger("Enter array size: ", scanner);
            if (size <= 0) {
                throw new ArrayIndexOutOfBoundsException("Array size must be greater than zero.");
            }
            int[] arr = new int[size];
            int index = getValidatedInteger("Enter index to access: ", scanner);
            System.out.println("Value: " + arr[index]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Invalid index access.");
        }
    }

    private static void handleClassCastException() {
        printTitle("ClassCastException");
        try {
            Object obj = new ExceptionHandler();
            String str = (String) obj;
        } catch (ClassCastException e) {
            System.out.println("Error: Invalid type casting.");
        }
    }

    private static void handleIllegalArgumentException(Scanner scanner) {
        printTitle("IllegalArgumentException");
        try {
            System.out.print("Enter sleep time in milliseconds: ");
            long time = Long.parseLong(scanner.nextLine().trim());
            if (time < 0) {
                throw new IllegalArgumentException("Sleep time cannot be negative.");
            }
            Thread.sleep(time);
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (InterruptedException e) {
            System.out.println("Error: Thread was interrupted.");
        }
    }

    private static void handleNumberFormatException(Scanner scanner) {
        printTitle("NumberFormatException");
        try {
            System.out.print("Enter a number: ");
            String input = scanner.nextLine().trim();
            int num = Integer.parseInt(input);
            System.out.println("Parsed number: " + num);
        } catch (NumberFormatException e) {
            System.out.println("Error: Invalid number format.");
        }
    }
}